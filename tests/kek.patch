commit b4fa0c9b13bf70e3c1680a78d2f5357bab8b41a7
Author: sarbash2004 <gasik@hosting.ru-central1.internal>
Date:   Tue Aug 22 20:53:45 2023 +0000

    ADD INDEX

diff --git a/Makefile b/Makefile
index 9ae41e4..76a183c 100644
--- a/Makefile
+++ b/Makefile
@@ -67,6 +67,7 @@ install: build-release
 
 # Hide target, use only in docker environment
 --debug-start-in-docker: install
+	@ulimit -n 100000
 	@sed -i 's/config_vars.yaml/config_vars.docker.yaml/g' /home/user/.local/etc/realmedium/static_config.yaml
 	@psql 'postgresql://user:password@service-postgres:5432/realmedium_db-1' -f ./postgresql/schemas/db-1.sql
 	@/home/user/.local/bin/realmedium \
diff --git a/configs/config_vars.docker.yaml b/configs/config_vars.docker.yaml
index 9363f7c..8863cd6 100644
--- a/configs/config_vars.docker.yaml
+++ b/configs/config_vars.docker.yaml
@@ -1,6 +1,6 @@
-worker-threads: 4
+worker-threads: 14
 worker-fs-threads: 2
-logger-level: debug
+logger-level: critical
 
 is_testing: false
 
diff --git a/configs/config_vars.yaml b/configs/config_vars.yaml
index a7ec8b1..50044ef 100644
--- a/configs/config_vars.yaml
+++ b/configs/config_vars.yaml
@@ -1,6 +1,6 @@
-worker-threads: 4
+worker-threads: 14
 worker-fs-threads: 2
-logger-level: debug
+logger-level: error
 
 is_testing: false
 
diff --git a/configs/dynamic_config_fallback.json b/configs/dynamic_config_fallback.json
index fc720dc..cd79da8 100644
--- a/configs/dynamic_config_fallback.json
+++ b/configs/dynamic_config_fallback.json
@@ -15,7 +15,7 @@
     "http-per-second": 1500,
     "https-limit": 100,
     "https-per-second": 25,
-    "per-host-limit": 3000,
+    "per-host-limit": 3500,
     "per-host-per-second": 500
   },
   "HTTP_CLIENT_ENFORCE_TASK_DEADLINE": {
@@ -27,7 +27,7 @@
       "default-task-processor": {
         "wait_queue_overload": {
           "action": "ignore",
-          "length_limit": 5000,
+          "length_limit": 50000,
           "time_limit_us": 3000
         }
       }
@@ -35,9 +35,9 @@
   },
   "POSTGRES_CONNECTION_POOL_SETTINGS": {
     "realmedium-database": {
-      "max_pool_size": 15,
-      "max_queue_size": 200,
-      "min_pool_size": 8
+      "max_pool_size": 150,
+      "max_queue_size": 2000,
+      "min_pool_size": 50
     }
   },
   "POSTGRES_DEFAULT_COMMAND_CONTROL": {
@@ -60,4 +60,4 @@
       "max_statement_metrics": 5
     }
   }
-}
\ No newline at end of file
+}
diff --git a/postgresql/schemas/db-1.sql b/postgresql/schemas/db-1.sql
index b361dcb..6d25afc 100644
--- a/postgresql/schemas/db-1.sql
+++ b/postgresql/schemas/db-1.sql
@@ -401,10 +401,9 @@ WHERE(_tag IS NULL
                                         INNER JOIN real_medium.favorites USING(user_id)
                                 WHERE
                                         username = _favorited))
-        ORDER BY
-                created_at DESC
         LIMIT _limit OFFSET _offset;
 END;
 $$
 LANGUAGE plpgsql;
 
+CREATE INDEX IF NOT EXISTS idx_createdat ON real_medium.articles(created_at);
diff --git a/tests/genStaticTest.py b/tests/genStaticTest.py
new file mode 100644
index 0000000..2f9875e
--- /dev/null
+++ b/tests/genStaticTest.py
@@ -0,0 +1,249 @@
+#!/usr/bin/python
+# -*- coding: utf-8 -*-
+
+import psycopg2
+import random, string, sys
+import numpy as np
+from functools import partial
+from itertools import chain
+
+COUNT_OF_USERS = 50000
+COUNT_OF_ARTICLES = 50000
+COUNT_OF_COMMENTS = 1000
+COUNT_FOLLOWERS = 20 # У каждого зера
+COUNT_FAVORITES = 20 # У Каждой статьи
+NAME_SCHEMA = "real_medium"
+
+TAG_LIST = ["c++", "cpp", "python", "ai", "guid", "backend", "frontend", "userver"]
+
+def getColumn(con, nameTable, nameField):
+    cur = con.cursor()
+    cur.execute("SELECT " + nameField + " FROM " + NAME_SCHEMA + "." + nameTable)
+ 
+    return list(chain.from_iterable(cur.fetchall()))
+
+def progress_bar(current, total, bar_length=20):
+    fraction = current / total
+
+    arrow = int(fraction * bar_length - 1) * '-' + '>'
+    padding = int(bar_length - len(arrow)) * ' '
+
+    ending = '\n' if current == total else '\r'
+
+    print(f'[{arrow}{padding}] {int(fraction*100)}% ({current}/{total})', end=ending)
+
+
+def createStrExecuteDelete(nameTable):
+    strExecute = "TRUNCATE " + NAME_SCHEMA + "." + nameTable + " CASCADE"
+    return strExecute
+
+def createStrExecuteInsert(nameTable, kwargs):
+    strExecute = "INSERT INTO " + NAME_SCHEMA + "." + nameTable + " (" + ", ".join(kwargs.keys()) + ") VALUES(\'" + "\', \'".join(kwargs.values()) + "\')"
+    return strExecute
+
+def clearDataBase(con):
+    print("Clear db")
+
+    cur = con.cursor()
+
+    tableList = ["favorites", "article_tag", "followers", "articles", "users", "tag_list"]
+    for nameTable in tableList:
+        cur.execute(createStrExecuteDelete(nameTable))
+
+    print("End")
+
+def fillUsers(con):
+
+    cur = con.cursor()
+
+    for i in range(COUNT_OF_USERS):
+        progress_bar(i + 1, COUNT_OF_USERS)
+        dictOfExecute = {"email":"user" + str(i) + "@yandex.ru",
+                         "username":"user"+str(i),
+                         "password_hash":"8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
+                         "bio":"Юмор всегда срабатывает, когда нужно произвести впечатление на пользователей в Инстаграм. Границы между остроумием и юмором часто сливаются.",
+                         "image":"https://proprikol.ru/wp-content/uploads/2020/11/kartinki-paczanov-43.jpg"}
+
+
+        strExecute = createStrExecuteInsert("users", dictOfExecute)
+        cur.execute(strExecute)
+
+
+
+
+def fillArticles(con):
+    
+    cur = con.cursor()
+    
+    userIDList = getColumn(con, "users", "user_id")
+
+    for i in range(COUNT_OF_ARTICLES):
+        progress_bar(i+1, COUNT_OF_ARTICLES)
+
+        dictOfExecute = {"slug":"name-of-the-article-number-" + str(i),
+                         "title":"name of the article. Number " + str(i),
+                         "body":"Это какаое-то тело для статьи, длинною в целою жизнь. Зачем ты это читаешь, тут не будет ничего полезного или интересного, весь этот текст - просто пыль.\n"*20,
+                         "description":"Описание этой статьи ещё более бессмысленное, ведь он описывают ту беcсмыслицу, что будет в этой статье.",
+                         "favorites_count":"100",
+                         "user_id":userIDList[i%(COUNT_OF_USERS-1)]}
+   
+        strExecute = createStrExecuteInsert("articles", dictOfExecute)
+   
+        cur.execute(strExecute)
+
+def filtTagLIst(con):
+    cur = con.cursor()
+
+    cntTag = len(TAG_LIST)
+    for i in range(cntTag):
+        progress_bar(i+1, cntTag)
+        strExecute = createStrExecuteInsert("tag_list", {"tag_name":TAG_LIST[i]})
+        cur.execute(strExecute)   
+
+def fillArticleTag(con):
+
+    cur = con.cursor()
+    
+
+    articleIDList = getColumn(con, "articles", "article_id")
+    tagIDList = getColumn(con, "tag_list", "tag_id")
+
+    cnt = 1
+    for articleID in articleIDList:
+        progress_bar(cnt, COUNT_OF_ARTICLES)
+        cnt +=1
+        for tagID in tagIDList:
+            strExecute = createStrExecuteInsert("article_tag", {"article_id": articleID, "tag_id":tagID})
+            cur.execute(strExecute) 
+
+
+
+def fillFavorites(con):
+    cur = con.cursor()
+
+    articleIDList = getColumn(con, "articles", "article_id")
+    userIDList = getColumn(con, "users", "user_id")
+
+    cnt = 1
+    curPos = 0
+
+    for userID in userIDList:
+        progress_bar(cnt, COUNT_OF_USERS)
+        
+        cnt += 1
+
+        if(curPos + COUNT_FAVORITES > COUNT_OF_ARTICLES):
+            curPos = 0
+        
+        randArticleIDList = articleIDList[curPos:curPos+COUNT_FAVORITES]
+        curPos += COUNT_FAVORITES
+
+        for articleID in randArticleIDList:
+            strExecute = createStrExecuteInsert("favorites", {"user_id":userID, "article_id": articleID})
+            cur.execute(strExecute)    
+
+def fillFollowers(con):
+
+    cur = con.cursor()
+
+    userIDList = getColumn(con, "users", "user_id")
+
+    cnt = 1
+    curPos =0
+    for followed in userIDList:
+        progress_bar(cnt, COUNT_OF_USERS)
+        cnt += 1
+
+        
+        if(curPos + COUNT_FOLLOWERS > COUNT_OF_USERS):
+            curPos = 0
+        
+        randFollowerList = userIDList[curPos:curPos+COUNT_FOLLOWERS]
+        curPos += COUNT_FOLLOWERS
+
+        for follower in randFollowerList:
+            if(followed == follower):
+                continue
+            strExecute = createStrExecuteInsert("followers", {"followed_user_id":followed, "follower_user_id": follower})
+            cur.execute(strExecute)    
+
+def fillComments(con):
+    cur = con.cursor()
+
+    userIDList = getColumn(con, "users", "user_id")
+    articleIDList = getColumn(con, "articles", "article_id")
+
+
+
+    for i in range(COUNT_OF_COMMENTS):
+        progress_bar(i+1, COUNT_OF_COMMENTS)
+ 
+        dictOfExecute = {"body":"О да!! Я восхищён этой бессмыслицей в кубе. Это всё явно показывает бессмысленость смысла",
+                         "user_id": userIDList[i%(COUNT_OF_USERS-1)],
+                         "article_id":articleIDList[1%(COUNT_OF_ARTICLES-1)]}
+
+        strExecute = createStrExecuteInsert("comments", dictOfExecute)
+        cur.execute(strExecute)    
+
+
+
+
+
+def main():
+    con = None
+
+    try:
+
+        if(COUNT_OF_USERS < COUNT_FAVORITES):
+            print(f"\nERROR:\n\t COUNT_OF_USERS < COUNT_FAVORITES: {COUNT_OF_USERS} < {COUNT_FAVORITES}")
+            exit(1)
+        
+        if(COUNT_OF_USERS < COUNT_FOLLOWERS):
+            print(f"\nERROR:\n\t COUNT_OF_USERS < COUNT_FOLLOWERS: {COUNT_OF_USERS} < {COUNT_FOLLOWERS}")
+            exit(1)
+        
+        if(len(sys.argv) == 1):
+            sys.argv.append("realmedium_db-1")
+
+        conn_string = "host=localhost port=8081 dbname=\'" + sys.argv[1] + "\' user=user password=password"
+        print ("Connecting to database\n    ->{}".format(conn_string))
+        
+        con = psycopg2.connect(conn_string)
+        
+        print(f"\nCount of USER: {COUNT_OF_USERS}")
+        print(f"Count of ARTICLE: {COUNT_OF_ARTICLES}")
+        print(f"Max follower: {COUNT_FOLLOWERS}")
+        print(f"Max favorite: {COUNT_FAVORITES}")
+        print(f"TAG: {TAG_LIST}")
+
+        clearDataBase(con)      
+        print("Fill tables ")
+        print("users: ")
+        fillUsers(con)
+        print("articles: ")
+        fillArticles(con)
+        print("tag_list: ")
+        filtTagLIst(con)
+        print("article_tag: ")
+        fillArticleTag(con)
+        print("favorite: ")
+        fillFavorites(con)
+        print("followers: ")
+        fillFollowers(con)
+        print("comments: ")
+        fillComments(con)
+        
+        con.commit()
+
+        print("Successfully finished")
+
+    except psycopg2.DatabaseError as e:
+        print(f'Error {e}')
+        sys.exit(1)
+
+    finally:
+        if con:
+            con.close()    
+
+if __name__ == "__main__":
+    main()
diff --git a/tests/testGen.py b/tests/genTest.py
similarity index 79%
rename from tests/testGen.py
rename to tests/genTest.py
index 7207a3e..2df0871 100644
--- a/tests/testGen.py
+++ b/tests/genTest.py
@@ -7,16 +7,18 @@ import numpy as np
 from functools import partial
 from itertools import chain
 
-COUNT_OF_USERS = 100000
-COUNT_OF_ARTICLES = 10000
-COUNT_OF_COMMENTS = 1000
-MAX_FOLLOWERS = 400 # Максимум феворитов у каждой статьи
-MAX_FAVORITES = 400 # Максимум подписчиков у каждого по-отдельности
+COUNT_OF_USERS = 30000
+COUNT_OF_ARTICLES = 30000
+COUNT_OF_COMMENTS = 15000
+MAX_FOLLOWERS = 200 # Максимум Ффоловерок у каждого пользователя
+MAX_FAVORITES = 200 # Максимум лайков у каждой статьи по отдельности
 NAME_SCHEMA = "real_medium"
 
 TITLES_DEFAULT = ["Monkey eat banan", "123456", "title", "article", "123"]
 USERS_DEFAULT = ["vasya", "jake", "123", "root"]
 
+TAG_LIST = ["c++", "cpp", "python", "ai", "guid", "backend", "frontend", "userver"]
+
 def generate_random_number(min_value, max_value, step):
     num = random.randint(min_value // step, max_value // step) * step
     return num
@@ -110,8 +112,19 @@ def getColumn(con, nameTable, nameField):
     
     return list(chain.from_iterable(cur.fetchall()))
 
+def progress_bar(current, total, bar_length=20):
+    fraction = current / total
+
+    arrow = int(fraction * bar_length - 1) * '-' + '>'
+    padding = int(bar_length - len(arrow)) * ' '
+
+    ending = '\n' if current == total else '\r'
+
+    print(f'[{arrow}{padding}] {int(fraction*100)}%', end=ending)
+
+
 def createStrExecuteDelete(nameTable):
-    strExecute = "DELETE FROM " + NAME_SCHEMA + "." + nameTable
+    strExecute = "TRUNCATE " + NAME_SCHEMA + "." + nameTable + " CASCADE"
     return strExecute
 
 def createStrExecuteInsert(nameTable, kwargs):
@@ -123,17 +136,20 @@ def clearDataBase(con):
     
     cur = con.cursor()
 
-    dbList = ["favorites", "article_tag", "followers", "articles", "users", "tag_list"]
-    for nameDB in dbList:
-        cur.execute(createStrExecuteDelete(nameDB))
+    tableList = ["favorites", "article_tag", "followers", "articles", "users", "tag_list"]
+    for nameTable in tableList:
+        cur.execute(createStrExecuteDelete(nameTable))
+
+    print("End")
 
 def fillUsers(con):
-    print("Fill users")
+ 
 
     cur = con.cursor()
    
     emails = genEmailList(COUNT_OF_USERS)
-    usernames = USERS_DEFAULT + genUsername(max(0, COUNT_OF_USERS - len(USERS_DEFAULT))) 
+    lenUsersDefault = len(USERS_DEFAULT)
+    usernames = USERS_DEFAULT + genUsername(max(0, COUNT_OF_USERS - lenUsersDefault)) 
     imageList = ["https://fikiwiki.com/uploads/posts/2022-02/1644991237_23-fikiwiki-com-p-kartinki-krasivikh-koshechek-31.jpg",
                  "https://webpulse.imgsmail.ru/imgpreview?key=pulse_cabinet-image-c52e6c20-071b-46fe-b0c0-cbad32ffb447&mb=webpulse",
                  "https://vplate.ru/images/article/orig/2019/04/belye-koshki-s-golubymi-glazami-harakterna-li-dlya-nih-gluhota-i-kakimi-oni-byvayut-29.jpg",
@@ -141,10 +157,14 @@ def fillUsers(con):
                  "https://proprikol.ru/wp-content/uploads/2020/11/kartinki-paczanov-43.jpg"]
     
     for i in range(COUNT_OF_USERS):
+        progress_bar(i+1, COUNT_OF_USERS)
         randPassHash = "".join(random.choices(list(string.ascii_letters), k = 255))
         randBio = genText(15, 0)
         randImage = random.choice(imageList)
 
+        if(i < lenUsersDefault):
+            emails[i] = usernames[i] + "@yandex.ru"
+
         dictOfExecute = {"email":emails[i],
                          "username":usernames[i],
                          "password_hash":"8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92",
@@ -159,7 +179,6 @@ def fillUsers(con):
 
 
 def fillArticles(con):
-    print("Fill articles")
     
     cur = con.cursor()
 
@@ -173,10 +192,12 @@ def fillArticles(con):
     userIDList = getColumn(con, "users", "user_id")
 
     for i in range(COUNT_OF_ARTICLES):
+        progress_bar(i+1, COUNT_OF_ARTICLES)
+
         title = titles[i]
         slug = title.replace('.', "").replace(' ', '-').lower()
         slug += "_" + str(i)
-        body = genText(60, 0)
+        body = genText(random.randint(100, 400), 0)
         description = genText(20, 0)
         favorites_count = random.randint(0, COUNT_OF_USERS)
         userID = random.choice(userIDList)
@@ -193,57 +214,80 @@ def fillArticles(con):
    
         cur.execute(strExecute)
 
-def fillTagList(con):
-    print("Fill tag_list")
+def fillTAG_LIST(con):
     cur = con.cursor()
-    
-    tagList = ["c++", "python", "ai", "guid", "backend", "frontend", "userver"]
 
-    for i in tagList:
-        strExecute = createStrExecuteInsert("tag_list", {"tag_name":i})
+    cntTag = len(TAG_LIST)
+    for i in range(cntTag):
+        progress_bar(i+1, cntTag)
+        strExecute = createStrExecuteInsert("tag_list", {"tag_name":TAG_LIST[i]})
         cur.execute(strExecute)   
 
 def fillArticleTag(con):
-    print("Fill article_tag")
 
     cur = con.cursor()
-    cur.execute(createStrExecuteDelete("article_tag"))
+    
 
     articleIDList = getColumn(con, "articles", "article_id")
     tagIDList = getColumn(con, "tag_list", "tag_id")
 
-
+    cnt = 1
     for articleID in articleIDList:
+        progress_bar(cnt, COUNT_OF_ARTICLES)
+        cnt +=1
         randTagIDList = random.sample(tagIDList, random.randint(1, len(tagIDList)))
         for tagID in randTagIDList:
             strExecute = createStrExecuteInsert("article_tag", {"article_id": articleID, "tag_id":tagID})
-            cur.execute(strExecute)   
+            cur.execute(strExecute) 
+
 
-def fillFavorites(con):
-    print("Fill favorites")
 
+def fillFavorites(con):
     cur = con.cursor()
-    cur.execute(createStrExecuteDelete("article_tag"))
 
     articleIDList = getColumn(con, "articles", "article_id")
     userIDList = getColumn(con, "users", "user_id")
 
+    cnt = 1
+    curPos = 0
+
     for userID in userIDList:
-        randArticleIDList = random.sample(articleIDList, random.randint(1, min(MAX_FAVORITES, COUNT_OF_ARTICLES)))
+        progress_bar(cnt, COUNT_OF_ARTICLES)
+        
+        cnt += 1
+        
+        step = random.randint(1, MAX_FAVORITES)
+        
+        if(curPos + step > COUNT_OF_ARTICLES):
+            curPos = 0
+        
+        randArticleIDList = articleIDList[curPos:curPos+step]
+        curPos+=step
+
         for articleID in randArticleIDList:
             strExecute = createStrExecuteInsert("favorites", {"user_id":userID, "article_id": articleID})
             cur.execute(strExecute)    
 
 def fillFollowers(con):
-    print("Fill followers")
 
     cur = con.cursor()
-    cur.execute(createStrExecuteDelete("article_tag"))
-    print(0)
+
     userIDList = getColumn(con, "users", "user_id")
-    print(1)
+
+    cnt = 1
+    curPos =0
     for followed in userIDList:
-        randFollowerList = random.sample(userIDList, random.randint(1, MAX_FOLLOWERS))
+        progress_bar(cnt, COUNT_OF_USERS)
+        cnt += 1
+
+        step = random.randint(1, MAX_FOLLOWERS)
+        
+        if(curPos + step > COUNT_OF_USERS):
+            curPos = 0
+        
+        randFollowerList = userIDList[curPos:curPos+step]
+        curPos += step
+
         for follower in randFollowerList:
             if(followed == follower):
                 continue
@@ -251,10 +295,7 @@ def fillFollowers(con):
             cur.execute(strExecute)    
 
 def fillComments(con):
-    print("Fill comments")
-
     cur = con.cursor()
-    cur.execute(createStrExecuteDelete("article_tag"))
 
     userIDList = getColumn(con, "users", "user_id")
     articleIDList = getColumn(con, "articles", "article_id")
@@ -262,6 +303,7 @@ def fillComments(con):
 
 
     for i in range(COUNT_OF_COMMENTS):
+        progress_bar(i+1, COUNT_OF_COMMENTS)
         userID = random.choice(userIDList)
         articleID = random.choice(articleIDList)
 
@@ -276,8 +318,6 @@ def fillComments(con):
 
 
 
-
-
 def main():
     con = None
 
@@ -291,24 +331,39 @@ def main():
             print(f"\nERROR:\n\t COUNT_OF_USERS < MAX_FOLLOWERS: {COUNT_OF_USERS} < {MAX_FOLLOWERS}")
             exit(1)
         
+        if(len(sys.argv) == 1):
+            sys.argv.append("realmedium_db-1")
+
         conn_string = "host=localhost port=8081 dbname=\'" + sys.argv[1] + "\' user=user password=password"
         print ("Connecting to database\n    ->{}".format(conn_string))
         
         con = psycopg2.connect(conn_string)
-
+        
+        print(f"\nCount of USER: {COUNT_OF_USERS}")
+        print(f"Count of ARTICLE: {COUNT_OF_ARTICLES}")
+        print(f"Max follower: {MAX_FOLLOWERS}")
+        print(f"Max favorite: {MAX_FAVORITES}")
+        print(f"TAG: {TAG_LIST}")
         print('\nDefault titles: ' + str(TITLES_DEFAULT))
-        print('Default users: ' + str(USERS_DEFAULT) + "\n\tpassword=123456")
+        print('Default users: ' + str(USERS_DEFAULT) + "\n\tpassword=123456\temail=name@yandex.ru\n")
 
         clearDataBase(con)      
-        
+        print("Fill tables: ")
+        print("users: ")
         fillUsers(con)
+        print("articles: ")
         fillArticles(con)
-        fillTagList(con)
+        print("tag_list: ")
+        fillTAG_LIST(con)
+        print("article_tag: ")
         fillArticleTag(con)
+        print("favorite: ")
         fillFavorites(con)
+        print("followers: ")
         fillFollowers(con)
+        print("comments: ")
         fillComments(con)
-
+        
         con.commit()
 
         print("Successfully finished")
@@ -322,4 +377,4 @@ def main():
             con.close()    
 
 if __name__ == "__main__":
-    main()
\ No newline at end of file
+    main()
